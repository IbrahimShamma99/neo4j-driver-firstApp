"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _connectionHolder = _interopRequireDefault(require("./connection-holder"));

/**
 * Copyright (c) 2002-2020 "Neo4j,"
 * Neo4j Sweden AB [http://neo4j.com]
 *
 * This file is part of Neo4j.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Provides a interaction with a ConnectionHolder without change it state by
 * releasing or initilizing
 */
var ReadOnlyConnectionHolder =
/*#__PURE__*/
function (_ConnectionHolder) {
  (0, _inherits2["default"])(ReadOnlyConnectionHolder, _ConnectionHolder);

  /**
   * Contructor
   * @param {ConnectionHolder} connectionHolder the connection holder which will treat the requests
   */
  function ReadOnlyConnectionHolder(connectionHolder) {
    var _this;

    (0, _classCallCheck2["default"])(this, ReadOnlyConnectionHolder);
    _this = (0, _possibleConstructorReturn2["default"])(this, (0, _getPrototypeOf2["default"])(ReadOnlyConnectionHolder).call(this, {
      mode: connectionHolder._mode,
      database: connectionHolder._database,
      bookmark: connectionHolder._bookmark,
      connectionProvider: connectionHolder._connectionProvider
    }));
    _this._connectionHolder = connectionHolder;
    return _this;
  }
  /**
   * Return the true if the connection is suppose to be initilized with the command.
   *
   * @return {boolean}
   */


  (0, _createClass2["default"])(ReadOnlyConnectionHolder, [{
    key: "initializeConnection",
    value: function initializeConnection() {
      if (this._connectionHolder._referenceCount === 0) {
        return false;
      }

      return true;
    }
    /**
     * Get the current connection promise.
     * @return {Promise<Connection>} promise resolved with the current connection.
     */

  }, {
    key: "getConnection",
    value: function getConnection() {
      return this._connectionHolder.getConnection();
    }
    /**
     * Get the current connection promise, doesn't performs the release
     * @return {Promise<Connection>} promise with the resolved current connection
     */

  }, {
    key: "releaseConnection",
    value: function releaseConnection() {
      return this._connectionHolder.getConnection()["catch"](function () {
        return Promise.resolve();
      });
    }
    /**
     * Get the current connection promise, doesn't performs the connection close
     * @return {Promise<Connection>} promise with the resolved current connection
     */

  }, {
    key: "close",
    value: function close() {
      return this._connectionHolder.getConnection()["catch"](function () {
        return function () {
          return Promise.resolve();
        };
      });
    }
  }]);
  return ReadOnlyConnectionHolder;
}(_connectionHolder["default"]);

exports["default"] = ReadOnlyConnectionHolder;